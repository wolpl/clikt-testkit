{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#snapshots","title":"Snapshots","text":""},{"location":"limitations/","title":"Limitations","text":"<p>Be aware of the following limitations when using Clikt Testkit:</p> <ul> <li>The <code>test()</code> function can only capture outputs that are printed via <code>CliktCommand.echo()</code>. Anything printed with <code>println()</code>, <code>System.out.print()</code>, ... is invisible to the testkit.</li> <li>Analogously, you can only provide input to the cli, if it asks for it using <code>CliktCommand.prompt()</code>.</li> <li>Although the dsl functions, like <code>expectOutput()</code> and <code>provideInput()</code>, all run with a timeout, the CLI command can make your test run longer, because it may not allow cancellation after the timeout elapsed.   The command will stop execution as soon as it tries to write output or read input (using the respective Clikt functions).   It will also stop when it calls a cancellable suspending function.   No matter how long the command continues to run however, the test will still fail, if a timeout occurred.</li> </ul>"},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/#inputs-and-outputs","title":"Inputs and Outputs","text":"<p>The Clikt Testkit allows you to assert standard and error outputs, as well as to answer prompts from a <code>CliktCommand</code>:</p> <pre><code>class Greeter : CliktCommand() {\noverride fun run() {\nval name = prompt(\"Enter your name\")\necho(\"Hello $name!\")\necho(\"I failed successfully!\", err = true)\nthrow ProgramResult(-42)\n}\n}\n\nGreeter().test {\nexpectOutput(\"Enter your name: \")\nprovideInput(\"Tester\")\nexpectOutput(\"Hello Tester!\")\nexpectErrorOutput(\"I failed successfully!\")\nexpectTermination(-42)\n}\n</code></pre>"},{"location":"user-guide/#command-options","title":"Command Options","text":""},{"location":"user-guide/#providing-command-line-arguments","title":"Providing command line arguments","text":"<p>To provide command line arguments to the tested command, you can supply them to the <code>test()</code> function:</p> <pre><code>class Greet : CliktCommand() {\nval name by argument()\nval count by option().int().default(1)\n\noverride fun run() {\nrepeat(count) {\necho(\"Hello $name!\")\n}\n}\n}\n\nGreet().test(\"--count\", \"3\", \"Tester\") {\nexpectOutput(\"Hello Tester!\")\nexpectOutput(\"Hello Tester!\")\nexpectOutput(\"Hello Tester!\")\nexpectTermination(0)\n}\n</code></pre>"},{"location":"user-guide/#providing-environment-variables","title":"Providing environment variables","text":"<p>Clikt allows reading values from environment variables. You can provide those for testing, by setting the respective parameter of the <code>test()</code> function: <pre><code>class Greet : CliktCommand() {\nval name by option(envvar = \"GREETER_NAME\").required()\noverride fun run() {\necho(\"Hello $name!\")\n}\n}\n\nGreet().test(\nenvironmentVariables = mapOf(\n\"GREETER_NAME\" to \"Tester\"\n)\n) {\nexpectOutput(\"Hello Tester!\")\n}\n</code></pre></p> <p>Warning</p> <p>This feature is implemented by setting the <code>envvarReader</code> in the <code>context</code> of the CliktCommand you test. Consequently, providing test environment variables will not work, if a subcommand of the tested command overwrites this field.</p>"}]}